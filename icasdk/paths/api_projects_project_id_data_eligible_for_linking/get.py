# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from icasdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from icasdk import schemas  # noqa: F401

from icasdk.model.problem import Problem
from icasdk.model.data_paged_list import DataPagedList

from . import path

# Query params
FullTextSchema = schemas.StrSchema


class IdSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'IdSchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class FilenameSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'FilenameSchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class FilenameMatchModeSchema(
    schemas.EnumBase,
    schemas.StrSchema
):


    class MetaOapg:
        enum_value_to_name = {
            "EXACT": "EXACT",
            "EXCLUDE": "EXCLUDE",
            "FUZZY": "FUZZY",
        }
    
    @schemas.classproperty
    def EXACT(cls):
        return cls("EXACT")
    
    @schemas.classproperty
    def EXCLUDE(cls):
        return cls("EXCLUDE")
    
    @schemas.classproperty
    def FUZZY(cls):
        return cls("FUZZY")


class FilePathSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'FilePathSchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class FilePathMatchModeSchema(
    schemas.EnumBase,
    schemas.StrSchema
):


    class MetaOapg:
        enum_value_to_name = {
            "STARTS_WITH_CASE_INSENSITIVE": "STARTS_WITH_CASE_INSENSITIVE",
            "FULL_CASE_INSENSITIVE": "FULL_CASE_INSENSITIVE",
        }
    
    @schemas.classproperty
    def STARTS_WITH_CASE_INSENSITIVE(cls):
        return cls("STARTS_WITH_CASE_INSENSITIVE")
    
    @schemas.classproperty
    def FULL_CASE_INSENSITIVE(cls):
        return cls("FULL_CASE_INSENSITIVE")


class StatusSchema(
    schemas.ListSchema
):


    class MetaOapg:
        
        
        class items(
            schemas.EnumBase,
            schemas.StrSchema
        ):
        
        
            class MetaOapg:
                enum_value_to_name = {
                    "PARTIAL": "PARTIAL",
                    "AVAILABLE": "AVAILABLE",
                    "ARCHIVING": "ARCHIVING",
                    "ARCHIVED": "ARCHIVED",
                    "UNARCHIVING": "UNARCHIVING",
                    "DELETING": "DELETING",
                }
            
            @schemas.classproperty
            def PARTIAL(cls):
                return cls("PARTIAL")
            
            @schemas.classproperty
            def AVAILABLE(cls):
                return cls("AVAILABLE")
            
            @schemas.classproperty
            def ARCHIVING(cls):
                return cls("ARCHIVING")
            
            @schemas.classproperty
            def ARCHIVED(cls):
                return cls("ARCHIVED")
            
            @schemas.classproperty
            def UNARCHIVING(cls):
                return cls("UNARCHIVING")
            
            @schemas.classproperty
            def DELETING(cls):
                return cls("DELETING")

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'StatusSchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class FormatIdSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'FormatIdSchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class FormatCodeSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'FormatCodeSchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class TypeSchema(
    schemas.EnumBase,
    schemas.StrSchema
):


    class MetaOapg:
        enum_value_to_name = {
            "FILE": "FILE",
            "FOLDER": "FOLDER",
        }
    
    @schemas.classproperty
    def FILE(cls):
        return cls("FILE")
    
    @schemas.classproperty
    def FOLDER(cls):
        return cls("FOLDER")


class ParentFolderIdSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ParentFolderIdSchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
ParentFolderPathSchema = schemas.StrSchema
CreationDateAfterSchema = schemas.DateTimeSchema
CreationDateBeforeSchema = schemas.DateTimeSchema
StatusDateAfterSchema = schemas.DateTimeSchema
StatusDateBeforeSchema = schemas.DateTimeSchema


class UserTagSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'UserTagSchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class UserTagMatchModeSchema(
    schemas.EnumBase,
    schemas.StrSchema
):


    class MetaOapg:
        enum_value_to_name = {
            "EXACT": "EXACT",
            "EXCLUDE": "EXCLUDE",
            "FUZZY": "FUZZY",
        }
    
    @schemas.classproperty
    def EXACT(cls):
        return cls("EXACT")
    
    @schemas.classproperty
    def EXCLUDE(cls):
        return cls("EXCLUDE")
    
    @schemas.classproperty
    def FUZZY(cls):
        return cls("FUZZY")


class RunInputTagSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'RunInputTagSchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class RunInputTagMatchModeSchema(
    schemas.EnumBase,
    schemas.StrSchema
):


    class MetaOapg:
        enum_value_to_name = {
            "EXACT": "EXACT",
            "EXCLUDE": "EXCLUDE",
            "FUZZY": "FUZZY",
        }
    
    @schemas.classproperty
    def EXACT(cls):
        return cls("EXACT")
    
    @schemas.classproperty
    def EXCLUDE(cls):
        return cls("EXCLUDE")
    
    @schemas.classproperty
    def FUZZY(cls):
        return cls("FUZZY")


class RunOutputTagSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'RunOutputTagSchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class RunOutputTagMatchModeSchema(
    schemas.EnumBase,
    schemas.StrSchema
):


    class MetaOapg:
        enum_value_to_name = {
            "EXACT": "EXACT",
            "EXCLUDE": "EXCLUDE",
            "FUZZY": "FUZZY",
        }
    
    @schemas.classproperty
    def EXACT(cls):
        return cls("EXACT")
    
    @schemas.classproperty
    def EXCLUDE(cls):
        return cls("EXCLUDE")
    
    @schemas.classproperty
    def FUZZY(cls):
        return cls("FUZZY")


class ConnectorTagSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ConnectorTagSchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class ConnectorTagMatchModeSchema(
    schemas.EnumBase,
    schemas.StrSchema
):


    class MetaOapg:
        enum_value_to_name = {
            "EXACT": "EXACT",
            "EXCLUDE": "EXCLUDE",
            "FUZZY": "FUZZY",
        }
    
    @schemas.classproperty
    def EXACT(cls):
        return cls("EXACT")
    
    @schemas.classproperty
    def EXCLUDE(cls):
        return cls("EXCLUDE")
    
    @schemas.classproperty
    def FUZZY(cls):
        return cls("FUZZY")


class TechnicalTagSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'TechnicalTagSchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class TechnicalTagMatchModeSchema(
    schemas.EnumBase,
    schemas.StrSchema
):


    class MetaOapg:
        enum_value_to_name = {
            "EXACT": "EXACT",
            "EXCLUDE": "EXCLUDE",
            "FUZZY": "FUZZY",
        }
    
    @schemas.classproperty
    def EXACT(cls):
        return cls("EXACT")
    
    @schemas.classproperty
    def EXCLUDE(cls):
        return cls("EXCLUDE")
    
    @schemas.classproperty
    def FUZZY(cls):
        return cls("FUZZY")
NotInRunSchema = schemas.BoolSchema
NotLinkedToSampleSchema = schemas.BoolSchema


class InstrumentRunIdSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'InstrumentRunIdSchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
PageOffsetSchema = schemas.StrSchema
PageTokenSchema = schemas.StrSchema
PageSizeSchema = schemas.StrSchema
SortSchema = schemas.StrSchema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'fullText': typing.Union[FullTextSchema, str, ],
        'id': typing.Union[IdSchema, list, tuple, ],
        'filename': typing.Union[FilenameSchema, list, tuple, ],
        'filenameMatchMode': typing.Union[FilenameMatchModeSchema, str, ],
        'filePath': typing.Union[FilePathSchema, list, tuple, ],
        'filePathMatchMode': typing.Union[FilePathMatchModeSchema, str, ],
        'status': typing.Union[StatusSchema, list, tuple, ],
        'formatId': typing.Union[FormatIdSchema, list, tuple, ],
        'formatCode': typing.Union[FormatCodeSchema, list, tuple, ],
        'type': typing.Union[TypeSchema, str, ],
        'parentFolderId': typing.Union[ParentFolderIdSchema, list, tuple, ],
        'parentFolderPath': typing.Union[ParentFolderPathSchema, str, ],
        'creationDateAfter': typing.Union[CreationDateAfterSchema, str, datetime, ],
        'creationDateBefore': typing.Union[CreationDateBeforeSchema, str, datetime, ],
        'statusDateAfter': typing.Union[StatusDateAfterSchema, str, datetime, ],
        'statusDateBefore': typing.Union[StatusDateBeforeSchema, str, datetime, ],
        'userTag': typing.Union[UserTagSchema, list, tuple, ],
        'userTagMatchMode': typing.Union[UserTagMatchModeSchema, str, ],
        'runInputTag': typing.Union[RunInputTagSchema, list, tuple, ],
        'runInputTagMatchMode': typing.Union[RunInputTagMatchModeSchema, str, ],
        'runOutputTag': typing.Union[RunOutputTagSchema, list, tuple, ],
        'runOutputTagMatchMode': typing.Union[RunOutputTagMatchModeSchema, str, ],
        'connectorTag': typing.Union[ConnectorTagSchema, list, tuple, ],
        'connectorTagMatchMode': typing.Union[ConnectorTagMatchModeSchema, str, ],
        'technicalTag': typing.Union[TechnicalTagSchema, list, tuple, ],
        'technicalTagMatchMode': typing.Union[TechnicalTagMatchModeSchema, str, ],
        'notInRun': typing.Union[NotInRunSchema, bool, ],
        'notLinkedToSample': typing.Union[NotLinkedToSampleSchema, bool, ],
        'instrumentRunId': typing.Union[InstrumentRunIdSchema, list, tuple, ],
        'pageOffset': typing.Union[PageOffsetSchema, str, ],
        'pageToken': typing.Union[PageTokenSchema, str, ],
        'pageSize': typing.Union[PageSizeSchema, str, ],
        'sort': typing.Union[SortSchema, str, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_full_text = api_client.QueryParameter(
    name="fullText",
    style=api_client.ParameterStyle.FORM,
    schema=FullTextSchema,
    explode=True,
)
request_query_id = api_client.QueryParameter(
    name="id",
    style=api_client.ParameterStyle.FORM,
    schema=IdSchema,
    explode=True,
)
request_query_filename = api_client.QueryParameter(
    name="filename",
    style=api_client.ParameterStyle.FORM,
    schema=FilenameSchema,
    explode=True,
)
request_query_filename_match_mode = api_client.QueryParameter(
    name="filenameMatchMode",
    style=api_client.ParameterStyle.FORM,
    schema=FilenameMatchModeSchema,
    explode=True,
)
request_query_file_path = api_client.QueryParameter(
    name="filePath",
    style=api_client.ParameterStyle.FORM,
    schema=FilePathSchema,
    explode=True,
)
request_query_file_path_match_mode = api_client.QueryParameter(
    name="filePathMatchMode",
    style=api_client.ParameterStyle.FORM,
    schema=FilePathMatchModeSchema,
    explode=True,
)
request_query_status = api_client.QueryParameter(
    name="status",
    style=api_client.ParameterStyle.FORM,
    schema=StatusSchema,
    explode=True,
)
request_query_format_id = api_client.QueryParameter(
    name="formatId",
    style=api_client.ParameterStyle.FORM,
    schema=FormatIdSchema,
    explode=True,
)
request_query_format_code = api_client.QueryParameter(
    name="formatCode",
    style=api_client.ParameterStyle.FORM,
    schema=FormatCodeSchema,
    explode=True,
)
request_query_type = api_client.QueryParameter(
    name="type",
    style=api_client.ParameterStyle.FORM,
    schema=TypeSchema,
    explode=True,
)
request_query_parent_folder_id = api_client.QueryParameter(
    name="parentFolderId",
    style=api_client.ParameterStyle.FORM,
    schema=ParentFolderIdSchema,
    explode=True,
)
request_query_parent_folder_path = api_client.QueryParameter(
    name="parentFolderPath",
    style=api_client.ParameterStyle.FORM,
    schema=ParentFolderPathSchema,
    explode=True,
)
request_query_creation_date_after = api_client.QueryParameter(
    name="creationDateAfter",
    style=api_client.ParameterStyle.FORM,
    schema=CreationDateAfterSchema,
    explode=True,
)
request_query_creation_date_before = api_client.QueryParameter(
    name="creationDateBefore",
    style=api_client.ParameterStyle.FORM,
    schema=CreationDateBeforeSchema,
    explode=True,
)
request_query_status_date_after = api_client.QueryParameter(
    name="statusDateAfter",
    style=api_client.ParameterStyle.FORM,
    schema=StatusDateAfterSchema,
    explode=True,
)
request_query_status_date_before = api_client.QueryParameter(
    name="statusDateBefore",
    style=api_client.ParameterStyle.FORM,
    schema=StatusDateBeforeSchema,
    explode=True,
)
request_query_user_tag = api_client.QueryParameter(
    name="userTag",
    style=api_client.ParameterStyle.FORM,
    schema=UserTagSchema,
    explode=True,
)
request_query_user_tag_match_mode = api_client.QueryParameter(
    name="userTagMatchMode",
    style=api_client.ParameterStyle.FORM,
    schema=UserTagMatchModeSchema,
    explode=True,
)
request_query_run_input_tag = api_client.QueryParameter(
    name="runInputTag",
    style=api_client.ParameterStyle.FORM,
    schema=RunInputTagSchema,
    explode=True,
)
request_query_run_input_tag_match_mode = api_client.QueryParameter(
    name="runInputTagMatchMode",
    style=api_client.ParameterStyle.FORM,
    schema=RunInputTagMatchModeSchema,
    explode=True,
)
request_query_run_output_tag = api_client.QueryParameter(
    name="runOutputTag",
    style=api_client.ParameterStyle.FORM,
    schema=RunOutputTagSchema,
    explode=True,
)
request_query_run_output_tag_match_mode = api_client.QueryParameter(
    name="runOutputTagMatchMode",
    style=api_client.ParameterStyle.FORM,
    schema=RunOutputTagMatchModeSchema,
    explode=True,
)
request_query_connector_tag = api_client.QueryParameter(
    name="connectorTag",
    style=api_client.ParameterStyle.FORM,
    schema=ConnectorTagSchema,
    explode=True,
)
request_query_connector_tag_match_mode = api_client.QueryParameter(
    name="connectorTagMatchMode",
    style=api_client.ParameterStyle.FORM,
    schema=ConnectorTagMatchModeSchema,
    explode=True,
)
request_query_technical_tag = api_client.QueryParameter(
    name="technicalTag",
    style=api_client.ParameterStyle.FORM,
    schema=TechnicalTagSchema,
    explode=True,
)
request_query_technical_tag_match_mode = api_client.QueryParameter(
    name="technicalTagMatchMode",
    style=api_client.ParameterStyle.FORM,
    schema=TechnicalTagMatchModeSchema,
    explode=True,
)
request_query_not_in_run = api_client.QueryParameter(
    name="notInRun",
    style=api_client.ParameterStyle.FORM,
    schema=NotInRunSchema,
    explode=True,
)
request_query_not_linked_to_sample = api_client.QueryParameter(
    name="notLinkedToSample",
    style=api_client.ParameterStyle.FORM,
    schema=NotLinkedToSampleSchema,
    explode=True,
)
request_query_instrument_run_id = api_client.QueryParameter(
    name="instrumentRunId",
    style=api_client.ParameterStyle.FORM,
    schema=InstrumentRunIdSchema,
    explode=True,
)
request_query_page_offset = api_client.QueryParameter(
    name="pageOffset",
    style=api_client.ParameterStyle.FORM,
    schema=PageOffsetSchema,
    explode=True,
)
request_query_page_token = api_client.QueryParameter(
    name="pageToken",
    style=api_client.ParameterStyle.FORM,
    schema=PageTokenSchema,
    explode=True,
)
request_query_page_size = api_client.QueryParameter(
    name="pageSize",
    style=api_client.ParameterStyle.FORM,
    schema=PageSizeSchema,
    explode=True,
)
request_query_sort = api_client.QueryParameter(
    name="sort",
    style=api_client.ParameterStyle.FORM,
    schema=SortSchema,
    explode=True,
)
# Path params
ProjectIdSchema = schemas.StrSchema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'projectId': typing.Union[ProjectIdSchema, str, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_project_id = api_client.PathParameter(
    name="projectId",
    style=api_client.ParameterStyle.SIMPLE,
    schema=ProjectIdSchema,
    required=True,
)
_auth = [
    'ApiKeyAuth',
    'JwtAuth',
]
SchemaFor200ResponseBodyApplicationVndIlluminaV3json = DataPagedList


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationVndIlluminaV3json,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/vnd.illumina.v3+json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationVndIlluminaV3json),
    },
)
SchemaFor0ResponseBodyApplicationProblemjson = Problem


@dataclass
class ApiResponseForDefault(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor0ResponseBodyApplicationProblemjson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_default = api_client.OpenApiResponse(
    response_cls=ApiResponseForDefault,
    content={
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor0ResponseBodyApplicationProblemjson),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
    'default': _response_for_default,
}
_all_accept_content_types = (
    'application/problem+json',
    'application/vnd.illumina.v3+json',
)


class BaseApi(api_client.Api):
    @typing.overload
    def _get_data_eligible_for_linking_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
    ]: ...

    @typing.overload
    def _get_data_eligible_for_linking_oapg(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def _get_data_eligible_for_linking_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def _get_data_eligible_for_linking_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        Retrieve a list of data eligible for linking to the current project.
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value

        _path_params = {}
        for parameter in (
            request_path_project_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)

        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)

        prefix_separator_iterator = None
        for parameter in (
            request_query_full_text,
            request_query_id,
            request_query_filename,
            request_query_filename_match_mode,
            request_query_file_path,
            request_query_file_path_match_mode,
            request_query_status,
            request_query_format_id,
            request_query_format_code,
            request_query_type,
            request_query_parent_folder_id,
            request_query_parent_folder_path,
            request_query_creation_date_after,
            request_query_creation_date_before,
            request_query_status_date_after,
            request_query_status_date_before,
            request_query_user_tag,
            request_query_user_tag_match_mode,
            request_query_run_input_tag,
            request_query_run_input_tag_match_mode,
            request_query_run_output_tag,
            request_query_run_output_tag_match_mode,
            request_query_connector_tag,
            request_query_connector_tag_match_mode,
            request_query_technical_tag,
            request_query_technical_tag_match_mode,
            request_query_not_in_run,
            request_query_not_linked_to_sample,
            request_query_instrument_run_id,
            request_query_page_offset,
            request_query_page_token,
            request_query_page_size,
            request_query_sort,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method='get'.upper(),
            headers=_headers,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                default_response = _status_code_to_response.get('default')
                if default_response:
                    api_response = default_response.deserialize(response, self.api_client.configuration)
                else:
                    api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)

        return api_response


class GetDataEligibleForLinking(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def get_data_eligible_for_linking(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
    ]: ...

    @typing.overload
    def get_data_eligible_for_linking(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def get_data_eligible_for_linking(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def get_data_eligible_for_linking(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._get_data_eligible_for_linking_oapg(
            query_params=query_params,
            path_params=path_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
    ]: ...

    @typing.overload
    def get(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._get_data_eligible_for_linking_oapg(
            query_params=query_params,
            path_params=path_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


