# coding: utf-8

"""
    ICA Rest API

    This API can be used to interact with Illumina Connected Analytics.<br> <h2>Authentication</h2> <p> Authentication to the  API can be done in multiple ways:<br> <ul><li>For the entire API, except for the POST /tokens endpoint: API-key + JWT</li> <li>Only for the POST /tokens endpoint: API-key + Basic Authentication</li></ul> </p> <p> <h4>API-key</h4> API keys are managed within the Illumina portal where you can manage your profile after you have logged on. The API-key has to be provided in the X-API-Key header parameter when executing API calls to ICA. In the background, a JWT will be requested at the IDP of Illumina to create a session. A good practice is to not use the API-key for every API call, but to first generate a JWT and to use that for authentication in subsequent calls.<br> </p> <p> <h4>JWT</h4> To avoid using an API-key for each call, we recommend to request a JWT via the POST /tokens endpoint  using this API-key. The JWT will expire after a pre-configured period specified by a tenant administrator through the IAM console in the Illumina portal. The JWT is the preferred way for authentication.<br>A not yet expired, still valid JWT could be refreshed using the POST /tokens:refresh endpoint.<br>Refreshing the JWT is not possible if the JWT was generated by using an API-key.<br> </p> <p> <h4>Basic Authentication</h4> Basic authentication is only supported by the POST /tokens endpoint for generating a JWT. Use \"Basic base64encoded(emailaddress:password)\" in the \"Authorization\" header parameter for this authentication method. In case having access to multiple tenants using the same email-address, also provide the \"tenant\" request parameter to indicate what tenant you would like to request a JWT for. </p> <p> <h2>Compression</h2> If the API client provides request header 'Accept-Encoding' with value 'gzip', then the API applies GZIP compression on the JSON response. This significantly reduces the size and thus the download time of the response, which results in faster end-to-end API calls. In case of compression, the API also provides response header 'Content-Encoding' with value 'gzip', as indication for the client that decompression is required. </p> 

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBytes, StrictStr, field_validator
from pydantic import Field
from typing_extensions import Annotated
from icasdk.models.links import Links
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CreateNextflowPipeline(BaseModel):
    """
    CreateNextflowPipeline
    """ # noqa: E501
    code: Annotated[str, Field(min_length=1, strict=True, max_length=255)] = Field(description="The code of the pipeline")
    pipeline_language_version_id: Optional[StrictStr] = Field(default=None, description="The id of the Nextflow version to use for the pipeline.", alias="pipelineLanguageVersionId")
    description: Annotated[str, Field(min_length=1, strict=True, max_length=4000)] = Field(description="The description of the pipeline")
    main_nextflow_file: Union[StrictBytes, StrictStr] = Field(description="The main Nextflow file.", alias="mainNextflowFile")
    nextflow_config_file: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="The Nextflow config file.", alias="nextflowConfigFile")
    other_nextflow_files: Optional[List[Union[StrictBytes, StrictStr]]] = Field(default=None, alias="otherNextflowFiles")
    parameters_xml_file: Union[StrictBytes, StrictStr] = Field(alias="parametersXmlFile")
    metadata_model_file: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="The metadata model json file(contents can be retrieved from the controlplane).", alias="metadataModelFile")
    links: Optional[Links] = None
    version_comment: Optional[StrictStr] = Field(default=None, alias="versionComment")
    categories: Optional[Annotated[List[StrictStr], Field(min_length=1, max_length=4000)]] = None
    html_documentation: Optional[StrictStr] = Field(default=None, alias="htmlDocumentation")
    analysis_storage_id: StrictStr = Field(description="The id of the storage to use for the pipeline.", alias="analysisStorageId")
    __properties: ClassVar[List[str]] = ["code", "pipelineLanguageVersionId", "description", "mainNextflowFile", "nextflowConfigFile", "otherNextflowFiles", "parametersXmlFile", "metadataModelFile", "links", "versionComment", "categories", "htmlDocumentation", "analysisStorageId"]

    @field_validator('code')
    def code_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9 _-]*(\/[a-zA-Z0-9 _-]+)*$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9 _-]*(\/[a-zA-Z0-9 _-]+)*$/")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CreateNextflowPipeline from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['links'] = self.links.to_dict()
        # set to None if pipeline_language_version_id (nullable) is None
        # and model_fields_set contains the field
        if self.pipeline_language_version_id is None and "pipeline_language_version_id" in self.model_fields_set:
            _dict['pipelineLanguageVersionId'] = None

        # set to None if metadata_model_file (nullable) is None
        # and model_fields_set contains the field
        if self.metadata_model_file is None and "metadata_model_file" in self.model_fields_set:
            _dict['metadataModelFile'] = None

        # set to None if links (nullable) is None
        # and model_fields_set contains the field
        if self.links is None and "links" in self.model_fields_set:
            _dict['links'] = None

        # set to None if version_comment (nullable) is None
        # and model_fields_set contains the field
        if self.version_comment is None and "version_comment" in self.model_fields_set:
            _dict['versionComment'] = None

        # set to None if categories (nullable) is None
        # and model_fields_set contains the field
        if self.categories is None and "categories" in self.model_fields_set:
            _dict['categories'] = None

        # set to None if html_documentation (nullable) is None
        # and model_fields_set contains the field
        if self.html_documentation is None and "html_documentation" in self.model_fields_set:
            _dict['htmlDocumentation'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CreateNextflowPipeline from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "code": obj.get("code"),
            "pipelineLanguageVersionId": obj.get("pipelineLanguageVersionId"),
            "description": obj.get("description"),
            "mainNextflowFile": obj.get("mainNextflowFile"),
            "nextflowConfigFile": obj.get("nextflowConfigFile"),
            "otherNextflowFiles": obj.get("otherNextflowFiles"),
            "parametersXmlFile": obj.get("parametersXmlFile"),
            "metadataModelFile": obj.get("metadataModelFile"),
            "links": Links.from_dict(obj.get("links")) if obj.get("links") is not None else None,
            "versionComment": obj.get("versionComment"),
            "categories": obj.get("categories"),
            "htmlDocumentation": obj.get("htmlDocumentation"),
            "analysisStorageId": obj.get("analysisStorageId")
        })
        return _obj


