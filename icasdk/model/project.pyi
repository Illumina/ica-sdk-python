# coding: utf-8

"""
    ICA Rest API

    This API can be used to interact with Illumina Connected Analytics.<br> <h2>Authentication</h2> <p> Authentication to the  API can be done in multiple ways:<br> <ul><li>For the entire API, except for the POST /tokens endpoint: API-key + JWT</li> <li>Only for the POST /tokens endpoint: API-key + Basic Authentication</li></ul> </p> <p> <h4>API-key</h4> API keys are managed within the Illumina portal where you can manage your profile after you have logged on. The API-key has to be provided in the X-API-Key header parameter when executing API calls to ICA. In the background, a JWT will be requested at the IDP of Illumina to create a session. A good practice is to not use the API-key for every API call, but to first generate a JWT and to use that for authentication in subsequent calls.<br> </p> <p> <h4>JWT</h4> To avoid using an API-key for each call, we recommend to request a JWT via the POST /tokens endpoint  using this API-key. The JWT will expire after a pre-configured period specified by a tenant administrator through the IAM console in the Illumina portal. The JWT is the preferred way for authentication.<br>A not yet expired, still valid JWT could be refreshed using the POST /tokens:refresh endpoint.<br>Refreshing the JWT is not possible if the JWT was generated by using an API-key.<br> </p> <p> <h4>Basic Authentication</h4> Basic authentication is only supported by the POST /tokens endpoint for generating a JWT. Use \"Basic base64encoded(emailaddress:password)\" in the \"Authorization\" header parameter for this authentication method. In case having access to multiple tenants using the same email-address, also provide the \"tenant\" request parameter to indicate what tenant you would like to request a JWT for. </p> <p> <h2>Compression</h2> If the API client provides request header 'Accept-Encoding' with value 'gzip', then the API applies GZIP compression on the JSON response. This significantly reduces the size and thus the download time of the response, which results in faster end-to-end API calls. In case of compression, the API also provides response header 'Content-Encoding' with value 'gzip', as indication for the client that decompression is required. </p>   # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from icasdk import schemas  # noqa: F401


class Project(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "billingMode",
            "name",
            "tenantId",
            "active",
            "timeCreated",
            "id",
            "ownerId",
            "region",
            "timeModified",
            "tags",
        }
        
        class properties:
            id = schemas.UUIDSchema
            timeCreated = schemas.DateTimeSchema
            timeModified = schemas.DateTimeSchema
            ownerId = schemas.UUIDSchema
            tenantId = schemas.UUIDSchema
            
            
            class name(
                schemas.StrSchema
            ):
                pass
            active = schemas.BoolSchema
        
            @staticmethod
            def region() -> typing.Type['Region']:
                return Region
            
            
            class billingMode(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def PROJECT(cls):
                    return cls("PROJECT")
                
                @schemas.classproperty
                def TENANT(cls):
                    return cls("TENANT")
        
            @staticmethod
            def tags() -> typing.Type['ProjectTag']:
                return ProjectTag
            
            
            class tenantName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tenantName':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class urn(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'urn':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class baseEnabled(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'baseEnabled':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class shortDescription(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'shortDescription':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class information(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'information':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class dataSharingEnabled(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'dataSharingEnabled':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def storageBundle() -> typing.Type['StorageBundle']:
                return StorageBundle
        
            @staticmethod
            def selfManagedStorageConfiguration() -> typing.Type['StorageConfiguration']:
                return StorageConfiguration
            
            
            class analysisPriority(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "LOW": "LOW",
                        "MEDIUM": "MEDIUM",
                        "HIGH": "HIGH",
                    }
                
                @schemas.classproperty
                def LOW(cls):
                    return cls("LOW")
                
                @schemas.classproperty
                def MEDIUM(cls):
                    return cls("MEDIUM")
                
                @schemas.classproperty
                def HIGH(cls):
                    return cls("HIGH")
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'analysisPriority':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def metadataModel() -> typing.Type['MetadataModel']:
                return MetadataModel
        
            @staticmethod
            def application() -> typing.Type['Application']:
                return Application
            __annotations__ = {
                "id": id,
                "timeCreated": timeCreated,
                "timeModified": timeModified,
                "ownerId": ownerId,
                "tenantId": tenantId,
                "name": name,
                "active": active,
                "region": region,
                "billingMode": billingMode,
                "tags": tags,
                "tenantName": tenantName,
                "urn": urn,
                "baseEnabled": baseEnabled,
                "shortDescription": shortDescription,
                "information": information,
                "dataSharingEnabled": dataSharingEnabled,
                "storageBundle": storageBundle,
                "selfManagedStorageConfiguration": selfManagedStorageConfiguration,
                "analysisPriority": analysisPriority,
                "metadataModel": metadataModel,
                "application": application,
            }

    
    billingMode: MetaOapg.properties.billingMode
    name: MetaOapg.properties.name
    tenantId: MetaOapg.properties.tenantId
    active: MetaOapg.properties.active
    timeCreated: MetaOapg.properties.timeCreated
    id: MetaOapg.properties.id
    ownerId: MetaOapg.properties.ownerId
    region: 'Region'
    timeModified: MetaOapg.properties.timeModified
    tags: 'ProjectTag'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timeCreated"]) -> MetaOapg.properties.timeCreated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timeModified"]) -> MetaOapg.properties.timeModified: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ownerId"]) -> MetaOapg.properties.ownerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tenantId"]) -> MetaOapg.properties.tenantId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["active"]) -> MetaOapg.properties.active: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["region"]) -> 'Region': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["billingMode"]) -> MetaOapg.properties.billingMode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tags"]) -> 'ProjectTag': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tenantName"]) -> MetaOapg.properties.tenantName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["urn"]) -> MetaOapg.properties.urn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["baseEnabled"]) -> MetaOapg.properties.baseEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shortDescription"]) -> MetaOapg.properties.shortDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["information"]) -> MetaOapg.properties.information: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataSharingEnabled"]) -> MetaOapg.properties.dataSharingEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["storageBundle"]) -> 'StorageBundle': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["selfManagedStorageConfiguration"]) -> 'StorageConfiguration': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["analysisPriority"]) -> MetaOapg.properties.analysisPriority: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadataModel"]) -> 'MetadataModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["application"]) -> 'Application': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "timeCreated", "timeModified", "ownerId", "tenantId", "name", "active", "region", "billingMode", "tags", "tenantName", "urn", "baseEnabled", "shortDescription", "information", "dataSharingEnabled", "storageBundle", "selfManagedStorageConfiguration", "analysisPriority", "metadataModel", "application", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timeCreated"]) -> MetaOapg.properties.timeCreated: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timeModified"]) -> MetaOapg.properties.timeModified: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ownerId"]) -> MetaOapg.properties.ownerId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tenantId"]) -> MetaOapg.properties.tenantId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["active"]) -> MetaOapg.properties.active: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["region"]) -> 'Region': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["billingMode"]) -> MetaOapg.properties.billingMode: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> 'ProjectTag': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tenantName"]) -> typing.Union[MetaOapg.properties.tenantName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["urn"]) -> typing.Union[MetaOapg.properties.urn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["baseEnabled"]) -> typing.Union[MetaOapg.properties.baseEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shortDescription"]) -> typing.Union[MetaOapg.properties.shortDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["information"]) -> typing.Union[MetaOapg.properties.information, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataSharingEnabled"]) -> typing.Union[MetaOapg.properties.dataSharingEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["storageBundle"]) -> typing.Union['StorageBundle', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["selfManagedStorageConfiguration"]) -> typing.Union['StorageConfiguration', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["analysisPriority"]) -> typing.Union[MetaOapg.properties.analysisPriority, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadataModel"]) -> typing.Union['MetadataModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["application"]) -> typing.Union['Application', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "timeCreated", "timeModified", "ownerId", "tenantId", "name", "active", "region", "billingMode", "tags", "tenantName", "urn", "baseEnabled", "shortDescription", "information", "dataSharingEnabled", "storageBundle", "selfManagedStorageConfiguration", "analysisPriority", "metadataModel", "application", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, None, ],
        tenantName: typing.Union[MetaOapg.properties.tenantName, None, str, schemas.Unset] = schemas.unset,
        urn: typing.Union[MetaOapg.properties.urn, None, str, schemas.Unset] = schemas.unset,
        baseEnabled: typing.Union[MetaOapg.properties.baseEnabled, None, bool, schemas.Unset] = schemas.unset,
        shortDescription: typing.Union[MetaOapg.properties.shortDescription, None, str, schemas.Unset] = schemas.unset,
        information: typing.Union[MetaOapg.properties.information, None, str, schemas.Unset] = schemas.unset,
        dataSharingEnabled: typing.Union[MetaOapg.properties.dataSharingEnabled, None, bool, schemas.Unset] = schemas.unset,
        storageBundle: typing.Union['StorageBundle', schemas.Unset] = schemas.unset,
        selfManagedStorageConfiguration: typing.Union['StorageConfiguration', schemas.Unset] = schemas.unset,
        analysisPriority: typing.Union[MetaOapg.properties.analysisPriority, None, str, schemas.Unset] = schemas.unset,
        metadataModel: typing.Union['MetadataModel', schemas.Unset] = schemas.unset,
        application: typing.Union['Application', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Project':
        return super().__new__(
            cls,
            *args,
            tenantName=tenantName,
            urn=urn,
            baseEnabled=baseEnabled,
            shortDescription=shortDescription,
            information=information,
            dataSharingEnabled=dataSharingEnabled,
            storageBundle=storageBundle,
            selfManagedStorageConfiguration=selfManagedStorageConfiguration,
            analysisPriority=analysisPriority,
            metadataModel=metadataModel,
            application=application,
            _configuration=_configuration,
            **kwargs,
        )

from icasdk.model.application import Application
from icasdk.model.metadata_model import MetadataModel
from icasdk.model.project_tag import ProjectTag
from icasdk.model.region import Region
from icasdk.model.storage_bundle import StorageBundle
from icasdk.model.storage_configuration import StorageConfiguration
